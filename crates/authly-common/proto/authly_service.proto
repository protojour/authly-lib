syntax = "proto3";
package authly_service;

service AuthlyService {
    // Fetch metadata about the service using this API.
    rpc GetMetadata (Empty) returns (ServiceMetadata);

    // Exchange a valid session for an access token.
    // The session info is passed as Authorization header or cookie.
    rpc GetAccessToken (Empty) returns (AccessToken);

    // Get the current property mapping for the service.
    rpc GetResourcePropertyMappings (Empty) returns (PropertyMappingsResponse);

    // Perform remote access control.
    // A valid access token must be passed in an Authorization bearer.
    rpc AccessControl (AccessControlRequest) returns (AccessControlResponse);

    // Make Authly sign the given certificate signing request using the local CA.
    rpc SignCertificate (CertificateSigningRequest) returns (Certificate);
}

// Metadata about the service.
message ServiceMetadata {
    // The entity ID of this service.
    bytes entity_id = 1;

    // The label given to this service.
    string label = 2;
}

// An access token response.
message AccessToken {
    // The token in encoded format.
    string token = 1;

    // The entity ID that the token represents.
    bytes entity_id = 2;
}

// The response of a property mappings request.
message PropertyMappingsResponse {
    // The list of properties.
    repeated PropertyMapping properties = 1;
}

// A mapping for a single property.
message PropertyMapping {
    // The property label.
    string label = 1;

    // The list of attributes.
    repeated AttributeMapping attributes = 2;
}

// A mapping for a single attribute of property.
message AttributeMapping {
    // The attribute label.
    string label = 1;

    // The attribe object id.
    bytes obj_id = 2;
}

// An access control request.
message AccessControlRequest {
    // list of resource attributes in byte encoding.
    repeated bytes resource_attributes = 1;

    // list of peer entity attributes known to the service.
    // The peer is the client of the service initiating the access control request.
    repeated bytes peer_entity_attributes = 2;

    // list of peer entity ids to include as subject paramaters.
    repeated bytes peer_entity_ids = 3;
}

// The outcome of an access control evaluation.
enum AccessControlOutcome {
    // Access is denied.
    DENY = 0;
    // Access is allowed.
    ALLOW = 1;
}

// The response of an access control evaluation.
message AccessControlResponse {
    // The outcome of the access control evaluation.
    AccessControlOutcome outcome = 1;
}

// An X509 certificate signing request.
message CertificateSigningRequest {
    // The DER encoding of the certificate signing request.
    bytes der = 1;
}

// An X509 certificate.
message Certificate {
    // The DER encoding of the certificate.
    bytes der = 1;
}

// Represents no information being sent.
message Empty {}
